Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
The testcases will be generated such that the answer is unique.
A substring is a contiguous sequence of characters within the string.

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.
 

Constraints:

m == s.length
n == t.length
1 <= m, n <= 105
s and t consist of uppercase and lowercase English letters.


-----Solution-----
class Solution {
    public String minWindow(String s, String t) {
        char[] s_arr = s.toCharArray();
        char[] t_arr = t.toCharArray();
        int[] map = new int[256];
        int start = 0, end = 0;
        int min_length = Integer.MAX_VALUE;
        
        for (int i = 0; i < t.length(); i++) map[t_arr[i]]++;
        
        int count = t_arr.length;
        int min_start = 0;
        
        while (end < s_arr.length) {
            if (map[s_arr[end]] > 0) count--;

            map[s_arr[end]]--;
            
            while (count == 0) {
                if ((end-start+1) < min_length) {
                    min_length = end-start+1;
                    min_start = start;
                }
                map[s_arr[start]]++;
                if (map[s_arr[start]] > 0) {
                    count++;
                }
                start++;
            }
            end++;
        }
        if(min_start + min_length > s_arr.length) return "";
        return s.substring(min_start, min_start+min_length);
    }
}