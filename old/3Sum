Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:

Input: nums = []
Output: []

Example 3:

Input: nums = [0]
Output: []

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105


-----Solution-----
import java.util.Arrays;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        
        for (int i = 0; i < nums.length; i++) {
            int left = i+1;
            int right = nums.length - 1;
            
            if (i==0||(i>0 && nums[i]!=nums[i-1])) {
            
                while (right > left) {
                    if (nums[right] + nums[left] > -nums[i]) {
                        right--;
                    }    
                    else if (nums[right] + nums[left] < -nums[i]) {
                        left++;
                    }
                    else {
                        List<Integer> tempon = Arrays.asList(nums[i],nums[left],nums[right]);
                        ans.add(tempon);
                        left++;
                        while(nums[left] == nums[left-1] && left<right) //issue was here
                            left++;
                    }
                }
            }
        }
        return ans;
    }
}